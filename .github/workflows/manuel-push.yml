# Name des GitHub Action Workflows
name: Manually Build and Push Branch to GHCR

# Dieser Workflow wird nur manuell über die Actions-Oberfläche gestartet.
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Der Branch, der gebaut und als Image veröffentlicht werden soll'
        required: true
        type: string
        # Der 'main'-Branch ist voreingestellt
        default: 'main'
      tag:
        description: 'Der Tag, der für das Docker-Image verwendet werden soll (z.B. latest, v1.2.0)'
        required: true
        type: string
        default: 'latest'

# Umgebungsvariablen, die für alle Jobs im Workflow gelten
env:
  # Name des Docker-Images. Passe dies an deinen Projektnamen an.
  # Es wird im Format ghcr.io/DEIN_GITHUB_BENUTZERNAME/DEIN_PROJEKTNAME sein
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Java Application
    # Der Typ des Runners, auf dem der Job ausgeführt wird
    runs-on: self-hosted

    # Service-Container für die Test-Datenbank
    # Dieser Block startet einen PostgreSQL-Container, der für die Dauer des Jobs verfügbar ist.
    services:
      postgres:
        image: pgvector/pgvector:pg17
        # Umgebungsvariablen zum Initialisieren der Test-Datenbank.
        # Diese Anmeldedaten werden im Build-Schritt unten verwendet.
        env:
          POSTGRES_DB: quarkus_test
          POSTGRES_USER: quarkus_test
          POSTGRES_PASSWORD: quarkus_test
        # Mappt den Port 5432 des Containers auf einen anderen Host-Port, um Konflikte zu vermeiden.
        ports:
          - 5439:5432
        # Health-Check, um sicherzustellen, dass der Build erst startet, wenn die DB bereit ist.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Berechtigungen, die der GITHUB_TOKEN für diesen Job benötigt.
    permissions:
      contents: read

    steps:
      # Schritt 1: Code aus dem ausgewählten Repository-Branch auschecken
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # Verwendet den Branch, der beim manuellen Starten ausgewählt wurde
          ref: ${{ github.event.inputs.branch }}

      # Schritt 2: Java JDK 21 (Zulu) einrichten
      # Richtet die angeforderte Java-Version und Distribution ein.
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'zulu'

      # Schritt 3: Node.js einrichten
      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22.19.0'
          cache: 'npm'
          cache-dependency-path: 'src/main/webui/package-lock.json'

      # Schritt 4: Mit Maven Wrapper bauen (JVM Build)
      # Stellt sicher, dass die mvnw-Datei ausführbar ist und führt dann den Build aus.
      - name: Build with Maven Wrapper
        # Umgebungsvariablen, um Quarkus mit der Test-DB zu verbinden.
        # Diese überschreiben die Werte aus deiner application.properties nur für diesen Schritt.
        env:
          QUARKUS_DATASOURCE_USERNAME: quarkus_test
          QUARKUS_DATASOURCE_PASSWORD: quarkus_test
          QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://localhost:5439/quarkus_test
          GEMINIE_ACCESS_TOKEN: ${{ secrets.GEMINIE_ACCESS_TOKEN}}
          MASTODON_PRIVATE_ACCESS_TOKEN: ${{ secrets.MASTODON_PRIVATE_ACCESS_TOKEN}}
          GEMINI_MODEL: ${{ vars.GEMINI_MODEL }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          HOMEASSISTANT_API_TOKEN: ${{ secrets.HOMEASSISTANT_API_TOKEN }}
        run: |
          chmod +x mvnw
          ./mvnw -B package --file pom.xml
          

      # Schritt 5: Build-Artefakte hochladen
      # Das 'target'-Verzeichnis enthält die gebaute JAR-Datei, die für den Docker-Build benötigt wird.
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app-build
          path: |
            target/quarkus-app/
            target/lib/
            target/*-runner.jar
            
            

  # ===================================================================
  # JOB 2: Pusht das Docker-Image zur GitHub Container Registry (GHCR)
  # ===================================================================
  push-to-ghcr:
    name: Push to GitHub Container Registry
    # Dieser Job startet erst, nachdem der 'build'-Job erfolgreich war.
    needs: build
    runs-on: self-hosted

    # Berechtigungen für diesen Job. Schreibberechtigung für Packages wird benötigt.
    permissions:
      contents: read
      packages: write

    steps:
      # Schritt 1: Code auschecken (wird für das Dockerfile benötigt)
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.branch }}

      # Schritt 2: Build-Artefakt herunterladen
      # Holt die im 'build'-Job erstellten Dateien.
      - name: Download build artifact
        uses: actions/download-artifact@v6
        with:
          name: java-app-build
          path: target/

      # Schritt 3: An der GitHub Container Registry (ghcr.io) anmelden
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Schritt 4: Metadaten für das Docker-Image extrahieren
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            ${{ github.event.inputs.tag }}

      # Schritt 5: Docker-Image bauen und in die GHCR hochladen
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # ===================================================================
  # ZUKÜNFTIGER JOB: Hier könntest du einen weiteren Push-Job hinzufügen
  # zum Beispiel für Docker Hub. Er würde parallel zu 'push-to-ghcr' laufen.
  # ===================================================================
  # push-to-dockerhub:
  #   name: Push to Docker Hub
  #   needs: build
  #   runs-on: self-hosted
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v5
  #       with:
  #         ref: ${{ github.event.inputs.branch }}
  #
  #     - name: Download build artifact
  #       uses: actions/download-artifact@v6
  #       with:
  #         name: java-app-build
  #         path: target/
  #
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #
  #     # ... weitere Schritte für den Build und Push zu Docker Hub
